/**
 * Copyright (C) SiteSupra SIA, Riga, Latvia, 2015
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
YUI.add('supra.manager-action-plugin-base', function (Y) {
	//Invoke strict mode
	"use strict";
	
	var Action = Supra.Manager.Action;
	var uid = 1;
	
	function PluginBase (host) {
		this.host = host;
		this.instances = {};
	};
	
	PluginBase.NAME = 'PluginBase';
	
	PluginBase.prototype = {
		/**
		 * Host action
		 * @type {Object}
		 */
		host: null,
		
		/**
		 * List of widget instances
		 * @type {Object}
		 */
		instances: {},
		
		/**
		 * Default placeholder nodes
		 * @type {Object}
		 */
		placeholders: null,
		
		/**
		 * Returns widget container ID attribute value
		 * @private
		 * @param {Object} widget
		 */
		_getWidgetContainerId: function (widget) {
			var node = widget.get('srcNode');
			if (node) {
				var id = node.getAttribute('id');
				if (id && id.indexOf('yui_') != 0) {
					return id;
				}
			}
			return null;
		},
		
		/**
		 * Add widget to instance list
		 * 
		 * @param {Object} widget
		 * @param {Object} id
		 * @param {Boolean} multiple Support multiple instances
		 * @return Widget which was added
		 * @type {Object}
		 */
		addWidget: function (widget, prefix) {
			//Use container ID
			var id = prefix;
			
			if (!prefix && !id) id = this._getWidgetContainerId(widget);
			if (!id && !prefix) id = widget.name;
			
			if (this.instances[id] || this.host[id]) id += uid++;
			
			this.instances[id] = widget;
			this.host[id] = widget;
			
			return widget;
		},
		
		/**
		 * Returns widget by ID
		 * 
		 * @param {String} id
		 * @return Widget instance
		 * @type {Object}
		 */
		getWidget: function (id) {
			return id in this.instances ? this.instances[id] : null;
		},
		
		/**
		 * Returns all widget instances generated by plugin
		 * 
		 * @return List of widget instances
		 * @type {Object}
		 */
		getWidgets: function () {
			return this.instances;
		},
		
		/**
		 * Actions create phase
		 */
		create: function () {
		},
		
		/**
		 * Set placeholders, this shouldn't be overwritten
		 * @private
		 */
		initializeBase: function () {
			//Set placeholders
			this.placeholders = this.host.getContainers();
		},
		
		/**
		 * Create all widgets
		 * @constructor
		 */
		initialize: function () {},
		
		/**
		 * Render widgets
		 */
		render: function () {
			var instances = this.instances;
			for(var i in instances) {
				var instance = instances[i];
				if ('render' in instance) {
					//If widget srcNode is in DOM, then no need to supply
					//place holder node
					if (instance.get('srcNode').ancestor()) {
						instance.render();
					} else {
						instance.render(this.placeholders.item(0));
					}
				}
			}
		},
		
		/**
		 * Execute
		 */
		execute: function () {}
	};
	
	Action.PluginBase = PluginBase;
	
	
	//Since this widget has Supra namespace, it doesn't need to be bound to each YUI instance
	//Make sure this constructor function is called only once
	delete(this.fn); this.fn = function () {};
	
}, YUI.version, {requires: ['supra.manager-base']});